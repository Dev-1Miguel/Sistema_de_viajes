package capaPresentacion;

import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;
import capaNegocio.Controlador;
import entidades.Cliente;
import entidades.Factura;
import entidades.Reserva;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author MICHELLE
 */
public class JPModuloFactura extends javax.swing.JPanel {

    Controlador controlador = new Controlador();
    Factura fa = new Factura();

    /**
     * Creates new form JPModuloFacturaEmitir
     */
    public JPModuloFactura() {
        initComponents();
    }

    public void limpiar() {
        txtCedula.setText("");
        txtFechaEmision.setText("");
        txtIva.setText("");
        txtNombreCliente.setText("");
        txtSubtotal.setText("");
        txtTotal.setText("");
        lblFactura.setText("");
        lblReserva.setText("");
    }

    private void calcularIVAyTotal() {
        try {
            double subTotal = Double.parseDouble(txtSubtotal.getText().trim());
            if (subTotal < 0) {
                JOptionPane.showMessageDialog(this, "El subtotal no puede ser negativo", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double iva = subTotal * 0.15; // 15% de IVA
            double total = subTotal + iva;

            // Muestra los valores en los campos de texto correspondientes
            txtIva.setText(String.format("%.2f", iva));
            txtTotal.setText(String.format("%.2f", total));
        } catch (NumberFormatException e) {
            // Maneja casos donde el texto ingresado no es un número
            txtIva.setText("");
            txtTotal.setText("");
        }
    }

    private void cargarValoresDeReserva(String clienteId) {
        Controlador controlador = new Controlador();
        Reserva reserva = controlador.obtenerReservaPorCedula(clienteId);

        if (reserva != null) {
            double subTotal = reserva.getPrecio_total(); // Precio total de la reserva
            double iva = subTotal * 0.15; // IVA del 15%
            double total = subTotal + iva;

            // Muestra los valores en los campos de texto
            txtSubtotal.setText(String.format("%.2f", subTotal));
            txtIva.setText(String.format("%.2f", iva));
            txtTotal.setText(String.format("%.2f", total));
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró una reserva para el cliente.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCedula = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNombreCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtSubtotal = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtFechaEmision = new javax.swing.JFormattedTextField();
        btnConsultar = new javax.swing.JButton();
        btnEmitir = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnAnular = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtIva = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        comboEstado = new javax.swing.JComboBox<>();
        comboMetodo = new javax.swing.JComboBox<>();
        lblReserva = new javax.swing.JLabel();
        lblFactura = new javax.swing.JLabel();
        btnConsultarFactura = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(242, 223, 157));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Agency FB", 1, 36)); // NOI18N
        jLabel1.setText("FACTURA");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, -1));
        jPanel1.add(txtCedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 230, -1));

        jLabel2.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jLabel2.setText("Cliente:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, -1, -1));
        jPanel1.add(txtNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 230, -1));

        jLabel3.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jLabel3.setText("Metodo de pago:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        jLabel4.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jLabel4.setText("Subtotal:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 280, -1, -1));

        jLabel5.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jLabel5.setText("Total:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 340, -1, -1));

        txtSubtotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSubtotalKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSubtotalKeyReleased(evt);
            }
        });
        jPanel1.add(txtSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 280, 90, -1));

        jLabel6.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jLabel6.setText("IVA:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 310, -1, -1));
        jPanel1.add(txtFechaEmision, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 230, -1));

        btnConsultar.setBackground(new java.awt.Color(68, 171, 244));
        btnConsultar.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        btnConsultar.setText("Consultar cliente");
        btnConsultar.setBorderPainted(false);
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });
        jPanel1.add(btnConsultar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 70, 170, 40));

        btnEmitir.setBackground(new java.awt.Color(68, 171, 244));
        btnEmitir.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        btnEmitir.setText("Emitir");
        btnEmitir.setBorderPainted(false);
        btnEmitir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmitirActionPerformed(evt);
            }
        });
        jPanel1.add(btnEmitir, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 180, 120, 40));

        btnModificar.setBackground(new java.awt.Color(77, 244, 68));
        btnModificar.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setBorderPainted(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 240, 120, 40));

        btnAnular.setBackground(new java.awt.Color(244, 95, 68));
        btnAnular.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        btnAnular.setText("Anular");
        btnAnular.setBorderPainted(false);
        btnAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularActionPerformed(evt);
            }
        });
        jPanel1.add(btnAnular, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 300, 120, 40));

        jLabel7.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jLabel7.setText("Cedula del cliente:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, 20));
        jPanel1.add(txtIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 90, -1));

        jLabel9.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jLabel9.setText("Fecha de emision:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, -1, -1));

        jLabel11.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jLabel11.setText("Estado:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, -1, -1));
        jPanel1.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, 90, -1));

        comboEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pagada", "Anulada", "Pendiente" }));
        jPanel1.add(comboEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, 90, -1));

        comboMetodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Efectivo", "Tarjeta", "Transferencia" }));
        jPanel1.add(comboMetodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, 100, -1));
        jPanel1.add(lblReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 60, 30));
        jPanel1.add(lblFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 50, 30));

        btnConsultarFactura.setBackground(new java.awt.Color(68, 171, 244));
        btnConsultarFactura.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        btnConsultarFactura.setText("Consultar");
        btnConsultarFactura.setBorderPainted(false);
        btnConsultarFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarFacturaActionPerformed(evt);
            }
        });
        jPanel1.add(btnConsultarFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, 120, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // Obtener la cédula ingresada por el usuario
        String cedula = txtCedula.getText().trim();

        if (cedula.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese una cédula.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try {
            String clienteId = txtCedula.getText().trim(); // O usa el ID único del cliente
            cargarValoresDeReserva(clienteId);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un ID de cliente válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        try {
            // Llamar al método del controlador para buscar el cliente y su reserva asociada
            Cliente cliente = controlador.obtenerClientePorCedula(cedula);
            Reserva reserva = controlador.obtenerReservaPorCedula(cedula);

            if (cliente != null && reserva != null) {
                // Mostrar los datos en los campos correspondientes
                txtNombreCliente.setText(cliente.getNombres_apellidos());
                lblReserva.setText(String.valueOf(reserva.getId()));
            } else if (cliente != null) {
                // Si no tiene reserva, solo mostrar el cliente
                txtNombreCliente.setText(cliente.getNombres_apellidos());
                lblReserva.setText("Sin reserva asociada");
            } else {
                // Mostrar un mensaje de error si no se encuentra el cliente
                JOptionPane.showMessageDialog(this, "No se encontró un cliente con esa cédula.", "Error", JOptionPane.ERROR_MESSAGE);
                // Limpiar los campos
                txtNombreCliente.setText("");
                lblReserva.setText("");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al consultar los datos: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnEmitirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmitirActionPerformed
        String nombre = txtNombreCliente.getText();
        String cedula = txtCedula.getText();
        String metodo = comboMetodo.getSelectedItem().toString();
        String estado = comboEstado.getSelectedItem().toString();
        String fechaEmision = txtFechaEmision.getText();
        double subTotal = 0;
        double iva = 0;
        double total = 0;
        int reserva = 0;
        String mensajeError = "";
        Boolean hayErrores = false;
        Locale locale = new Locale("es", "ES");
        NumberFormat numberFormat = NumberFormat.getInstance(locale);
        if (nombre.equals("")) {
            mensajeError += "Ingrese su nombre\n";
            hayErrores = true;
        }

        if (cedula.equals("")) {
            mensajeError += "Ingrese su cedula\n";
            hayErrores = true;
        }
        try {
            reserva = Integer.parseInt(lblReserva.getText().trim());
            if (reserva < 0) {
                mensajeError += "La cantidad no puede ser negativa\n";
                hayErrores = true;
            }
        } catch (NumberFormatException e) {
            mensajeError += "Ingrese una cantidad válida\n";
            hayErrores = true;
        }
        try {
            subTotal = numberFormat.parse(txtSubtotal.getText().trim()).doubleValue();
            if (subTotal < 0) {
                mensajeError += "La cantidad no puede ser negativa\n";
                hayErrores = true;
            }
        } catch (ParseException e) {
            mensajeError += "Ingrese una cantidad válida en formato decimal\n";
            hayErrores = true;
        }

        try {
            iva = numberFormat.parse(txtIva.getText().trim()).doubleValue();
            if (iva < 0) {
                mensajeError += "El precio no puede ser negativo\n";
                hayErrores = true;
            }
        } catch (ParseException e) {
            mensajeError += "Ingrese un precio válido en formato decimal\n";
            hayErrores = true;
        }

        try {
            total = numberFormat.parse(txtTotal.getText().trim()).doubleValue();
            if (total < 0) {
                mensajeError += "El precio no puede ser negativo\n";
                hayErrores = true;
            }
        } catch (ParseException e) {
            mensajeError += "Ingrese un precio válido en formato decimal\n";
            hayErrores = true;
        }

        if (fechaEmision.equals("") || fechaEmision.contains("_")) {
            mensajeError += "Ingrese una fecha válida\n";
            hayErrores = true;
        }

        if (hayErrores) {
            JOptionPane.showMessageDialog(this, mensajeError);
            return;
        }
        comboMetodo.addItem("Efectivo");
        comboMetodo.addItem("Tarjeta");
        comboMetodo.addItem("Transferencia");
        comboEstado.addItem("Pagada");
        comboEstado.addItem("Anulada");
        comboEstado.addItem("Pendiente");

        if (!estado.equals("Pagada") && !estado.equals("Anulada") && !estado.equals("Pendiente")) {
            JOptionPane.showMessageDialog(this, "La clase debe ser Económica, Ejecutiva o Primera.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!metodo.equals("Efectivo") && !metodo.equals("Tarjeta") && !metodo.equals("Transferencia")) {
            JOptionPane.showMessageDialog(this, "La clase debe ser Económica, Ejecutiva o Primera.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Buscar el cliente por nombre
        Controlador controlador = new Controlador();
        Cliente cliente = controlador.obtenerClientePorNombre(nombre);

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        sdf.setLenient(false);

        java.sql.Timestamp fechaRegistro = null;

        try {
            // Parsear el texto a un objeto java.util.Date
            java.util.Date fecha = sdf.parse(fechaEmision);

            // Convertir java.util.Date a java.sql.Timestamp
            fechaRegistro = new java.sql.Timestamp(fecha.getTime());

        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "La fecha ingresada no es válida", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Factura c = new Factura();

        c.setReserva_id(reserva);
        c.setEstado(estado);
        c.setMetodo(metodo);
        c.setSubTotal(subTotal);
        c.setIva(iva);
        c.setFecha_emision(fechaRegistro);

        c.setTotal(total);
        controlador.EmitirFactura(c);
        //JOptionPane.showMessageDialog(this, "Guardado correctamente", "INFORMACION", JOptionPane.INFORMATION_MESSAGE);
        limpiar();
    }//GEN-LAST:event_btnEmitirActionPerformed

    private void txtSubtotalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSubtotalKeyPressed
     }//GEN-LAST:event_txtSubtotalKeyPressed

    private void txtSubtotalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSubtotalKeyReleased
        calcularIVAyTotal();     }//GEN-LAST:event_txtSubtotalKeyReleased

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        String idText = lblFactura.getText().trim();
        System.out.println("ID obtenido de lblFactura: " + idText);
        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El ID de la factura no puede estar vacío.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idRegistro;
        try {
            idRegistro = Integer.parseInt(idText);
            System.out.println("ID convertido a entero: " + idRegistro);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID de la factura debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String reserva = lblReserva.getText().trim();
        int idReserva;
        try {
            idReserva = Integer.parseInt(reserva);
            System.out.println("ID convertido a entero: " + idReserva);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID de la factura debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String metodo = comboMetodo.getSelectedItem().toString();
        String estado = comboEstado.getSelectedItem().toString();
        String fechaEmision = txtFechaEmision.getText();
        double subTotal = 0;
        double iva = 0;
        double total = 0;
        Locale locale = new Locale("es", "ES");
        NumberFormat numberFormat = NumberFormat.getInstance(locale);
        try {
            subTotal = numberFormat.parse(txtSubtotal.getText().trim()).doubleValue();
            if (subTotal < 0) {
                System.out.println("ID convertido a entero: ");
            }
        } catch (ParseException e) {
            System.out.println("ID convertido a entero: ");
        }

        try {
            iva = numberFormat.parse(txtIva.getText().trim()).doubleValue();
            if (iva < 0) {
                System.out.println("ID convertido a entero: ");
            }
        } catch (ParseException e) {
            System.out.println("ID convertido a entero: ");
        }

        try {
            total = numberFormat.parse(txtTotal.getText().trim()).doubleValue();
            if (total < 0) {
                System.out.println("ID convertido a entero: ");
            }
        } catch (ParseException e) {
            System.out.println("ID convertido a entero: ");
        }

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        sdf.setLenient(false);
        java.sql.Timestamp fechaRegistro = null;

        if (fechaEmision.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar una fecha de emisión.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            java.util.Date fecha = sdf.parse(fechaEmision);
            fechaRegistro = new java.sql.Timestamp(fecha.getTime());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "La fecha ingresada no tiene el formato correcto (dd/MM/yyyy)", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Factura c = new Factura();
        c.setId(idRegistro);
        c.setReserva_id(idReserva);
        c.setEstado(estado);
        c.setMetodo(metodo);
        c.setSubTotal(subTotal);
        c.setIva(iva);
        c.setFecha_emision(fechaRegistro);
        c.setTotal(total);

        Controlador controlador = new Controlador();
        controlador.ModificarFactura(c);
        limpiar();
        JOptionPane.showMessageDialog(this, "Factura modificada correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnConsultarFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarFacturaActionPerformed

        String cedula = txtCedula.getText().trim();

        if (cedula.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese una cédula.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try {
            String clienteId = txtCedula.getText().trim();
            cargarValoresDeReserva(clienteId);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un ID de cliente válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        try {
            // Obtener los datos del cliente y la reserva asociados a la cédula
            Cliente cliente = controlador.obtenerClientePorCedula(cedula);
            Reserva reserva = controlador.obtenerReservaPorCedula(cedula);

            if (cliente != null) {
                txtNombreCliente.setText(cliente.getNombres_apellidos());
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró un cliente con esa cédula.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (reserva != null) {
                lblReserva.setText(String.valueOf(reserva.getId()));

                // Obtener la factura asociada a la reserva
                Factura factura = controlador.obtenerFacturaPorReserva(reserva.getId());

                if (factura != null) {
                    lblFactura.setText(String.valueOf(factura.getId())); // Mostrar el ID de la factura
                    txtFechaEmision.setText(factura.getFecha_emision() != null ? factura.getFecha_emision().toString() : ""); // Mostrar la fecha
                } else {
                    lblFactura.setText("Sin factura asociada");
                    txtFechaEmision.setText("");
                }
            } else {
                lblReserva.setText("Sin reserva asociada");
                lblFactura.setText("");
                txtFechaEmision.setText("");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al consultar los datos: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnConsultarFacturaActionPerformed

    private void btnAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularActionPerformed
        String idText = lblFactura.getText().trim();
        System.out.println("ID obtenido de lblFactura: " + idText);
        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El ID de la factura no puede estar vacío.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idRegistro;
        try {
            idRegistro = Integer.parseInt(idText);
            System.out.println("ID convertido a entero: " + idRegistro);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID de la factura debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String reserva = lblReserva.getText().trim();
        int idReserva;
        try {
            idReserva = Integer.parseInt(reserva);
            System.out.println("ID convertido a entero: " + idReserva);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID de la factura debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String metodo = comboMetodo.getSelectedItem().toString();
        String estado = comboEstado.getSelectedItem().toString();
        String fechaEmision = txtFechaEmision.getText();
        double subTotal = 0;
        double iva = 0;
        double total = 0;
        Locale locale = new Locale("es", "ES");
        NumberFormat numberFormat = NumberFormat.getInstance(locale);
        try {
            subTotal = numberFormat.parse(txtSubtotal.getText().trim()).doubleValue();
            if (subTotal < 0) {
                System.out.println("ID convertido a entero: ");
            }
        } catch (ParseException e) {
            System.out.println("ID convertido a entero: ");
        }

        try {
            iva = numberFormat.parse(txtIva.getText().trim()).doubleValue();
            if (iva < 0) {
                System.out.println("ID convertido a entero: ");
            }
        } catch (ParseException e) {
            System.out.println("ID convertido a entero: ");
        }

        try {
            total = numberFormat.parse(txtTotal.getText().trim()).doubleValue();
            if (total < 0) {
                System.out.println("ID convertido a entero: ");
            }
        } catch (ParseException e) {
            System.out.println("ID convertido a entero: ");
        }

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        sdf.setLenient(false);
        java.sql.Timestamp fechaRegistro = null;

        if (fechaEmision.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar una fecha de emisión.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            java.util.Date fecha = sdf.parse(fechaEmision);
            fechaRegistro = new java.sql.Timestamp(fecha.getTime());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "La fecha ingresada no tiene el formato correcto (dd/MM/yyyy)", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Factura c = new Factura();
        c.setId(idRegistro);
        c.setReserva_id(idReserva);
        c.setEstado(estado);
        c.setMetodo(metodo);
        c.setSubTotal(subTotal);
        c.setIva(iva);
        c.setFecha_emision(fechaRegistro);
        c.setTotal(total);

        Controlador controlador = new Controlador();
        controlador.ModificarFactura(c);
        limpiar();
        JOptionPane.showMessageDialog(this, "Factura anulada correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnAnularActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnular;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnConsultarFactura;
    private javax.swing.JButton btnEmitir;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox<String> comboEstado;
    private javax.swing.JComboBox<String> comboMetodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblFactura;
    private javax.swing.JLabel lblReserva;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JFormattedTextField txtFechaEmision;
    private javax.swing.JTextField txtIva;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtSubtotal;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
